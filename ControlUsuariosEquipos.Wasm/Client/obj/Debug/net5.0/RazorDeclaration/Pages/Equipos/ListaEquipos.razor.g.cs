// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ControlUsuariosEquipos.Wasm.Client.Pages.Equipos
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using ControlUsuariosEquipos.Wasm.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using ControlUsuariosEquipos.Wasm.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using ControlUsuariosEquipos.Wasm.Client.Servicios;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using ControlUsuariosEquipos.Wasm.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/Equipos")]
    public partial class ListaEquipos : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 154 "C:\Users\Víctor Liévano\Documents\Repositorio local\Proyectos Visual Studio\Practicas2022\ControlUsuariosEquipos.Wasm\Client\Pages\Equipos\ListaEquipos.razor"
       
    public int cantidadEquipos { get; set; }
    public List<Equipo> equipos;

    private bool confirmarCantidad { get; set; }
    private bool equiposLibres { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cantidadEquipos = await ServicioEquipo.CantidadEquipos();
            confirmarCantidad = true;
            equipos = (List<Equipo>)await ServicioEquipo.ObtenerEquipos();
            totalEquipos = equipos.Count;
            registros = 50;
        }
        catch (Exception e)
        {
            Console.WriteLine("Error encontrado: " + e.Message);
        }
    }

    private async Task EnlaceAgregarEquipo()
    {
        await Task.Yield();
        NavigationManager.NavigateTo($"/Equipos/Detalles_Equipo");
    }

    public string palabra = "";
    int totalEquipos;
    int registros;
    int[] array = new int[] { 10, 25, 50, 100, 250, 500 };

    private MudTable<Equipo> _table;

    private void IncreaseRowsPerPage(int registrosRecibidos)
    {
        registros = registrosRecibidos;
        _table.SetRowsPerPage(registros);
    }

    private bool Filtro(Equipo equipo) => AFiltrar(equipo, palabra);

    private bool AFiltrar(Equipo equipo, string palabra)
    {
        if (string.IsNullOrWhiteSpace(palabra))
            return true;
        if (!(string.IsNullOrEmpty(equipo.Usuario) || string.IsNullOrWhiteSpace(equipo.Usuario)))
        {
            if (equipo.Usuario.Contains(palabra, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (!(string.IsNullOrEmpty(equipo.Tipo) || string.IsNullOrWhiteSpace(equipo.Tipo)))
        {
            if (equipo.Tipo.Contains(palabra, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (!(string.IsNullOrEmpty(equipo.Folio) || string.IsNullOrWhiteSpace(equipo.Folio)))
        {
            if (equipo.Folio.Contains(palabra, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (!(string.IsNullOrEmpty(equipo.Marca) || string.IsNullOrWhiteSpace(equipo.Marca)))
        {
            if (equipo.Marca.Contains(palabra, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (!(string.IsNullOrEmpty(equipo.Modelo) || string.IsNullOrWhiteSpace(equipo.Modelo)))
        {
            if (equipo.Modelo.Contains(palabra, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (!(string.IsNullOrEmpty(equipo.Serie) || string.IsNullOrWhiteSpace(equipo.Serie)))
        {
            if (equipo.Serie.Contains(palabra, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (!(string.IsNullOrEmpty(equipo.Nombre) || string.IsNullOrWhiteSpace(equipo.Nombre)))
        {
            if (equipo.Nombre.Contains(palabra, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if ($"{equipo.FechaModificacion}".Contains(palabra))
            return true;
        if (!(string.IsNullOrEmpty(equipo.Observaciones) || string.IsNullOrWhiteSpace(equipo.Observaciones)))
        {
            if (equipo.Observaciones.Contains(palabra, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        return false;
    }

    public async Task VerHardware(int idEquipo, string tipo, string folio)
    {
        EquipoHardwareComputadora hardwareComputadora = await ServicioEquipo.ObtenerPCHardwarePorEquipo(idEquipo);

        string ssd = hardwareComputadora.Ssd == true ? " SSD" : "";

        string mensaje = "Procesador: " + hardwareComputadora.Procesador + ", Ram: " + hardwareComputadora.Ram + " GB, Almacenamiento: " + hardwareComputadora.DiscoDuro + " GB" + ssd;

        string titulo = tipo + " (folio: " + folio + ")";

        await Task.Delay(300);

        await js.InvokeVoidAsync("mensaje", titulo, mensaje, "info");
    }

    public async Task VerSoftware(int idEquipo, string tipo, string folio)
    {
        EquipoSoftwareComputadora softwareComputadora = await ServicioEquipo.ObtenerPCSoftwarePorEquipo(idEquipo);

        string mensaje = "Sistema operativo: " + softwareComputadora.SistemaOperativo + ", Versión de Office: " + softwareComputadora.VersionOffice;

        string titulo = tipo + " (folio: " + folio + ")";

        await Task.Delay(300);

        await js.InvokeVoidAsync("mensaje", titulo, mensaje, "info");
    }

    public async Task VerObservaciones(string observaciones, string tipo, string folio)
    {
        string mensaje = "Observaciones: " + observaciones;

        string titulo = tipo + " (folio: " + folio + ")";

        await Task.Delay(700);

        await js.InvokeVoidAsync("mensaje", titulo, mensaje, "info");
    }

    protected async Task ObtenerEquiposSinUsuario(bool activar)
    {
        await Task.Yield();
        if (activar)
        {
            equiposLibres = true;

            int cantidadEquiposLibres = await ServicioEquipo.CantidadEquiposLibres();

            if (cantidadEquiposLibres > 0)
            {
                equipos = (List<Equipo>)await ServicioEquipo.ObtenerEquiposSinUsuario();
                Snackbar.Add("Equipos sin usuario encontrados: " + cantidadEquiposLibres, Severity.Warning, a => a.VisibleStateDuration = 1500);
            }
            else
            {
                Snackbar.Add("Todos los equipos tienen al menos 1 usuario al que pertenecen", Severity.Success, config =>
            {
                config.Icon = Icons.Filled.Check;
                config.VisibleStateDuration = 1500;
            });
            }
        }else{
            equiposLibres = false;
            equipos = (List<Equipo>)await ServicioEquipo.ObtenerEquipos();
        }
    }

    protected async Task Editar(int id)
    {
        await Task.Yield();
        NavigationManager.NavigateTo($"/Equipos/Detalles_Equipo/{id}");
    }

    protected async Task Eliminar(int id)
    {
        await Task.Yield();
        var confirmacion = await js.InvokeAsync<bool>("confirmar", "Eliminar", "¿Deseas eliminar este registro?", "question");

        if (confirmacion)
        {
            await ServicioEquipo.EliminarEquipo(id);
            equipos.RemoveAll(p => p.Id == id);
            Snackbar.Add("Equipo Eliminado", Severity.Success, a => a.VisibleStateDuration = 200);
            totalEquipos = equipos.Count;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDialogService DialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IServicioEquipo ServicioEquipo { get; set; }
    }
}
#pragma warning restore 1591
